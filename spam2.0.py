import asyncio
import os
from telethon.tl.functions.messages import SetTypingRequest, SendReactionRequest
from telethon.tl.types import SendMessageTypingAction, ReactionEmoji
from telethon import TelegramClient
from telethon.errors import ChannelPrivateError, ChatAdminRequiredError, UserPrivacyRestrictedError
from colorama import Fore, init
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ AKKAYNT.txt
with open('AKKAYNT.txt', 'r', encoding='utf-8') as file:
    data = file.read()
exec(data)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.txt
def read_config():
    config = {
        "min_delay": 200,
        "max_delay": 400,
        "start_delay_min": 3600,
        "start_delay_max": 7200,
        "typing_min": 3,
        "typing_max": 7,
        "max_chats": 0
    }
    if os.path.exists("config.txt"):
        with open("config.txt", "r", encoding="utf-8") as file:
            for line in file:
                if "=" in line:
                    key, value = line.strip().split("=", 1)
                    key = key.strip().lower()
                    try:
                        config[key] = int(value.strip())
                    except ValueError:
                        pass
    return config

config = read_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(
    'session_name',
    api_id,
    api_hash,
    device_model='X570 MB',
    system_version='Windows 10 x64',
    lang_code='ru',
    system_lang_code='ru'
)

# –°–ø–∏—Å–æ–∫ emoji –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
EMOJI_LIST = ["‚ù§Ô∏è", "üî•", "üòÇ", "üëç", "ü•∞", "üòé", "üò±", "üíØ", "ü§ñ", "üëÄ"]

async def save_all_chats():
    try:
        dialogs = await client.get_dialogs()
        chats = []
        for dialog in dialogs:
            if dialog.is_group:
                chats.append(dialog.id)
        print(f"{Fore.GREEN}–ù–∞–π–¥–µ–Ω–æ {len(chats)} –±–µ—Å–µ–¥.")
        return chats
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {str(e)}")
        return []

async def send_message_to_chat(chat_id, words):
    try:
        print(f"{Fore.YELLOW}–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç—É {chat_id}...")
        entity = await client.get_entity(chat_id)
        messages = await client.get_messages(entity, limit=1)
        print(f"{Fore.LIGHTBLUE_EX}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã.")

        if messages:
            last_msg = messages[0]
            random_emoji = random.choice(EMOJI_LIST)
            await client(SendReactionRequest(
                peer=entity,
                msg_id=last_msg.id,
                reaction=[ReactionEmoji(emoticon=random_emoji)]
            ))
            print(f"{Fore.YELLOW}–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è: {random_emoji} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {last_msg.id}")

        print(f"{Fore.LIGHTMAGENTA_EX}–ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞...")
        await client(SetTypingRequest(peer=entity, action=SendMessageTypingAction()))
        await asyncio.sleep(random.uniform(config["typing_min"], config["typing_max"]))

        random_word = random.choice(words)
        await client.send_message(entity, random_word)
        print(f"{Fore.GREEN}–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {entity.title} (ID: {chat_id})!")

        random_delay = random.randint(config["min_delay"], config["max_delay"])
        print(f"{Fore.CYAN}–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º: {random_delay} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(random_delay)

    except (ChannelPrivateError, ChatAdminRequiredError, UserPrivacyRestrictedError) as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {str(e)}")
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {str(e)}")

async def main():
    await client.start(phone=phone_number)

    delay = random.randint(config["start_delay_min"], config["start_delay_max"])
    print(f"{Fore.CYAN}–ñ–¥—ë–º {delay // 60} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏...")
    await asyncio.sleep(delay)

    valid_chat_ids = await save_all_chats()

    if config["max_chats"] > 0:
        valid_chat_ids = valid_chat_ids[:config["max_chats"]]

    with open('words.txt', 'r', encoding='utf-8') as file:
        words = [line.strip() for line in file if line.strip()]

    if not valid_chat_ids:
        print(f"{Fore.RED}–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    while True:
        for chat_id in valid_chat_ids:
            await send_message_to_chat(chat_id, words)
            print(f"{Fore.CYAN}–ñ–¥–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Ç...")
            await asyncio.sleep(10)

if __name__ == "__main__":
    session_file = 'session_name.session'
    print(f"{Fore.CYAN}–£ –≤–∞—Å –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞? (–î–∞/–ù–µ—Ç): ", end="")
    answer = input().strip().lower()

    if answer in ["–¥–∞", "y", "yes"]:
        if os.path.exists(session_file):
            print(f"{Fore.GREEN}–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
            with client:
                print(f"{Fore.MAGENTA}–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
                client.loop.run_until_complete(main())
        else:
            print(f"{Fore.RED}–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª {session_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        print(f"{Fore.YELLOW}–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
        with client:
            client.loop.run_until_complete(main())
